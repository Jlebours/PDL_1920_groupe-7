,8 bit (byte),,16 bit (short integer),,32 bit,,64 bit (long integer),,Word size,,Arbitrarily precise (bignum)
,Signed,Unsigned,Signed,Unsigned,Signed,Unsigned,Signed,Unsigned,Signed,Unsigned,
Ada[1],range -2**7 .. 2**7 - 1{{ref|Ada_range|[j]}},range 0 .. 2**8 - 1{{ref|Ada_range|[j]}} or mod 2**8{{ref|Ada_mod|[k]}},range -2**15 .. 2**15 - 1{{ref|Ada_range|[j]}},range 0 .. 2**16 - 1{{ref|Ada_range|[j]}} or mod 2**16{{ref|Ada_mod|[k]}},range -2**31 .. 2**31 - 1{{ref|Ada_range|[j]}},range 0 .. 2**32 - 1{{ref|Ada_range|[j]}} or mod 2**32{{ref|Ada_mod|[k]}},range -2**63 .. 2**63 - 1{{ref|Ada_range|[j]}},mod 2**64{{ref|Ada_mod|[k]}},Integer{{ref|Ada_range|[j]}},range 0 .. 2**Integer'<wbr/>Size - 1{{ref|Ada_range|[j]}} or mod Integer'<wbr/>Size{{ref|Ada_mod|[k]}},{{n/a}}
ALGOL 68 (variable-width),short short int{{ref|CInt|[c]}},rowspan=2 {{n/a}},short int{{ref|CInt|[c]}},rowspan=2 {{n/a}},int{{ref|CInt|[c]}},rowspan=2 {{n/a}},long int{{ref|CInt|[c]}},rowspan=2 {{n/a}},int{{ref|CInt|[c]}},{{n/a}},long long int {{ref|a68|[a]}}{{ref|a68g|[g]}}
,,bytes & bits,,,,,,,,,
C (C99 fixed-width),int8_t,uint8_t,int16_t,uint16_t,int32_t,uint32_t,int64_t,uint64_t,int,unsigned int,rowspan=5 {{n/a}}
C++ (C++11 fixed-width),,,,,,,,,,,
C (C99 variable-width),signed char,unsigned char,short{{ref|CInt|[c]}},unsigned short{{ref|CInt|[c]}},long{{ref|CInt|[c]}},unsigned long{{ref|CInt|[c]}},long long{{ref|CInt|[c]}},unsigned long long{{ref|CInt|[c]}},,,
C++ (C++11 variable-width),,,,,,,,,,,
Objective-C (Cocoa),signed char or int8_t,unsigned char or uint8_t,short or int16_t,unsigned short or uint16_t,int or int32_t,unsigned int or uint32_t,long long or int64_t,unsigned long long or uint64_t,NSInteger or long,NSUInteger or unsigned long,
C#,sbyte,byte,short,ushort,int,uint,long,ulong,IntPtr,UIntPtr,System.Numerics<wbr/>.BigInteger (.NET 4.0)
Java,byte,{{n/a}},,char{{ref|Java char|[b]}},,{{n/a}},,{{n/a}},{{n/a}},{{n/a}},java.math<wbr/>.BigInteger
Go,int8,uint8 or byte,int16,uint16,int32,uint32,int64,uint64,int,uint,big.Int
Rust,i8,u8,i16,u16,i32,u32,i64,u64,isize,usize,{{n/a}}
Swift,Int8,UInt8,Int16,UInt16,Int32,UInt32,Int64,UInt64,Int,UInt,
D,byte,ubyte,short,ushort,int,uint,long,ulong,{{n/a}},{{n/a}},BigInt
Common Lisp[2],(integer -128 127),(integer 0 255),(integer -32768 32767),(integer 0 65536),(integer -2147483648 2147483647),(integer 0 4294967296),(integer -9223372036854775808 9223372036854775807),(integer 0 18446744073709551616),,,bignum
Scheme,,,,,,,,,,,
ISLISP[3],,,,,,,,,,,bignum
Pascal (FPC),shortint,byte,smallint,word,longint,longword,int64,qword,integer,cardinal,{{n/a}}
Visual Basic,{{n/a}},Byte,Integer,{{n/a}},Long,{{n/a}},colspan=2 {{n/a}},rowspan=2 colspan=2 {{n/a}},rowspan=1 {{n/a}},,
Visual Basic .NET,SByte,,Short,UShort,Integer,UInteger,Long,ULong,System.Numerics<wbr/>.BigInteger (.NET 4.0),,
FreeBasic,Byte or Integer<8>,UByte or UInteger<8>,Short or Integer<16>,UShort or UInteger<16>,Long or Integer<32>,ULong or UInteger<32>,LongInt or Integer<64>,ULongInt or UInteger<64>,Integer,UInteger,{{n/a}}
Python 2.x,colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},int,{{n/a}},long,,,,
Python 3.x,colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},int,,,,,
S-Lang,colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},{{n/a}},,,,,
Fortran,INTEGER<wbr/>(KIND = n){{ref|Kinds|[f]}},{{n/a}},INTEGER<wbr/>(KIND = n){{ref|Kinds|[f]}},{{n/a}},INTEGER<wbr/>(KIND = n){{ref|Kinds|[f]}},{{n/a}},INTEGER<wbr/>(KIND = n){{ref|Kinds|[f]}},{{n/a}},,,
PHP,colspan=2 {{n/a}},colspan=2 {{n/a}},int {{ref|PHP 32/64 bit long|[m]}},{{n/a}},int {{ref|PHP 32/64 bit long|[m]}},{{n/a}},colspan=2 {{n/a}},{{ref|PHP bignum|[e]}},,,
Perl 5,colspan=2 {{n/a}}{{ref|scalars|[d]}},colspan=2 {{n/a}}{{ref|scalars|[d]}},colspan=2 {{n/a}}{{ref|scalars|[d]}},colspan=2 {{n/a}}{{ref|scalars|[d]}},colspan=2 {{n/a}}{{ref|scalars|[d]}},Math::BigInt,,,,,
Perl 6,int8,uint8,int16,uint16,int32,uint32,int64,uint64,Int,colspan=2 {{n/a}},
Ruby,colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},Fixnum,{{n/a}},Bignum,,,,
Erlang{{ref|Erlang_int|[n]}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},integer(),{{n/a}},integer(){{ref|Erlang_arb|[o]}},,,,
Scala,Byte,{{n/a}},Short,Char{{ref|Scala Char|[l]}},Int,{{n/a}},Long,{{n/a}},{{n/a}},{{n/a}},scala.math.BigInt
Seed7,{{n/a}},{{n/a}},{{n/a}},{{n/a}},{{n/a}},{{n/a}},integer,{{n/a}},{{n/a}},{{n/a}},bigInteger
Smalltalk,colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},SmallInteger{{ref|Smalltalk|[i]}},{{n/a}},LargeInteger{{ref|Smalltalk|[i]}},,,,
Windows PowerShell,colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},{{n/a}},,,,,
OCaml,colspan=2 {{n/a}},colspan=2 {{n/a}},int32,{{n/a}},int64,{{n/a}},int or nativeint,,open Big_int;; big_int,,
F#,sbyte,byte,int16,uint16,,int32 or int,uint32,uint64,nativeint,unativeint,bigint
Standard ML,{{n/a}},Word8.word,colspan=2 {{n/a}},Int32.int,Word32.word,Int64.int,Word64.word,int,word,LargeInt.int or IntInf.int,
Haskell (GHC),«import Int» Int8,«import Word» Word8,«import Int» Int16,«import Word» Word16,«import Int» Int32,«import Word» Word32,«import Int» Int64,«import Word» Word64,Int,«import Word» Word,Integer
Eiffel,INTEGER_8,NATURAL_8,INTEGER_16,NATURAL_16,INTEGER_32,NATURAL_32,INTEGER_64,NATURAL_64,INTEGER,NATURAL,{{n/a}}
COBOL{{ref|Cobol|[h]}},BINARY-CHAR «SIGNED»,BINARY-CHAR UNSIGNED,BINARY-SHORT «SIGNED»,BINARY-SHORT UNSIGNED,BINARY-LONG «SIGNED»,BINARY-LONG UNSIGNED,BINARY-DOUBLE «SIGNED»,BINARY-DOUBLE UNSIGNED,{{n/a}},{{n/a}},{{n/a}}
Mathematica,colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},Integer,,,,,
Wolfram Language,colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},colspan=2 {{n/a}},Integer,,,,,
