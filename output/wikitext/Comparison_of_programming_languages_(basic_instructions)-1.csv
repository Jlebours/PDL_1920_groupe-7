,Simple composite types,,Algebraic data types,Unions
,Records,Tuple expression,,
Ada[1],type identifier is «abstract» «tagged» «limited» [record <dl><dd>fieldname1 : type;</dd> <dd>fieldname2 : type;</dd></dl>... end record | null record],{{n/a}},"Any combination of records, unions and enumerations (as well as references to those, enabling recursive types).",type identifier (variation : discrete_type) is record <dl><dd>case variation is <dl><dd>when choice_list1 => <dl><dd>fieldname1 : type;</dd> <dd>...</dd></dl></dd></dl> <dl><dd>when choice_list2 => <dl><dd>fieldname2 : type;</dd> <dd>...</dd></dl></dd></dl> <dl><dd>...</dd></dl> end case;</dd></dl>end record
ALGOL 68,"struct (modename «fieldname», ...);",Required types and operators can be user defined,,"union (modename, ...);"
C (C99),struct «name» {type name;...};,rowspan=2 {{n/a}},rowspan=3 {{n/a}},union {type name;...};
Objective-C,,,,
C++,struct «name» {type name;...};{{ref|C++'s struct|[b]}},«std::»tuple<type1..typen>,,
C#,struct name {type name;...},,,rowspan=3 {{n/a}}
Java,{{n/a}}{{ref|just classes|[a]}},,,
JavaScript,,{{n/a}},,
D,struct name {type name;...},,"std.variant.Algebraic!(type,...)",union {type name;...}
Go,struct {<dl><dd>«name» type ...</dd></dl>},,,
Swift,struct name {<dl><dd>var name «: type» ...</dd></dl>},"(«name1:» val1, «name2:» val2, «name3:» val3, ... )",enum name { case Foo«(types)» case Bar «(types)» ... },
Common Lisp,,(cons val1 val2){{ref|pair only|[c]}},,
Scheme,{{n/a}},,,
ISLISP,,,,
Pascal,record<dl><dd>name: type; ...</dd></dl>end,{{n/a}},{{n/a}},record<dl><dd>case type of value: (types); ...</dd></dl>end
Visual Basic,,,,
Visual Basic .NET,Structure name <dl><dd> Dim name As type ... </dd></dl> End Structure,,,
Python,{{n/a}}{{ref|just classes|[a]}},"«(»val1, val2, val3, ... «)»",,{{n/a}}
S-Lang,"struct {name [=value], ...}",,,
Fortran,TYPE name <dl><dd> type :: name ... </dd></dl> END TYPE,,,
PHP,{{n/a}}{{ref|just classes|[a]}},,,
Perl,{{n/a}}{{ref|Perl's records|[d]}},,,rowspan=3 {{n/a}}
Perl 6,{{n/a}}{{ref|just classes|[a]}},,,
Ruby,{{code|lang=ruby|1=OpenStruct.new({:name => value})}},,,
Scala,"case class name(«var» name: type, ...)","(val1, val2, val3, ... )",abstract class name case class Foo(«parameters») extends name case class Bar(«parameters») extends name ... or abstract class name case object Foo extends name case object Bar extends name ... or combination of case classes and case objects,
Windows PowerShell,,,,
OCaml,type name = {«mutable» name : type;...},"«(»val1, val2, val3, ... «)»",type name = Foo «of type» | Bar «of type» | ...,rowspan=4 {{n/a}}
F#,,,,
Standard ML,"type name = {name : type,...}","(val1, val2, val3, ... )",Bar «of type» | ...,
Haskell,"data Name = Constr {name :: type,...}",,Bar «types» | ...,
COBOL,level-number name type clauses. level-number+n name type clauses. ...,{{n/a}},{{n/a}},name REDEFINES variable type.
