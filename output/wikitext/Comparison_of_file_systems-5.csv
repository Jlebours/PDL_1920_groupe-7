File system,Tail packing,Transparent compression,Block suballocation,Allocate-on-flush,Extents,Variable file block size{{efn |name=note-41 |Variable block size refers to systems which support different block sizes on a per-file basis. (This is similar to extents but a slightly different implementational choice.) The current implementation in UFS2 is read-only.}},Sparse files,Copy on write,Trim support
DECtape,{{no}},{{no}},{{no}},{{no}},{{no}},{{no}},{{no}},{{no}},{{no}}
BeeGFS,{{no}},{{yes}},{{no}},{{yes}},{{yes}},{{yes}},{{yes}},{{yes}},{{dunno}}
Level-D,{{no}},{{no}},{{no}},{{no}},{{yes}},{{no}},{{no}},{{no}},{{dunno}}
APFS,{{dunno}},{{no}},{{dunno}},{{yes}},{{yes}},{{dunno}},{{yes}},{{yes}},{{yes}}[58][59]
Version 6 Unix file system (V6FS),{{no}},{{no}},{{no}},{{no}},{{no}},{{no}},{{yes}},{{dunno}},{{no}}
Version 7 Unix file system (V7FS),{{no}},{{no}},{{no}},{{no}},{{no}},{{no}},{{yes}},{{dunno}},{{no}}
FAT12,{{no}},{{partial}}{{efn |name=note-51}},{{partial}} (only inside of Stacker 3/4 and DriveSpace 3 compressed volumes[60]),{{no}},{{partial}} (only inside of compressed volumes)[61],{{no}},{{partial}} (only inside of compressed volumes)[62],{{no}},{{yes}} (Linux)
FAT16 / FAT16B / FAT16X,{{no}},"{{partial}}{{efn |name=note-51 |SuperStor in DR DOS 6.0, PalmDOS 1.0, PC DOS 6.1 and 6.3, Stacker in Novell DOS 7, OpenDOS 7.01, DR-DOS 7.02 (and higher), and PC DOS 7.0 (and higher), DoubleSpace in MS-DOS 6.0 and 6.20, and DriveSpace in MS-DOS 6.22 and Windows 95, 98 and Me are disk compression schemes for FAT, but are not supported for other operating systems.}}",{{partial}} (only inside of Stacker 3/4 and DriveSpace 3 compressed volumes[60]),{{no}},{{partial}} (only inside of compressed volumes)[61],{{no}},{{partial}} (only inside of compressed volumes)[62],{{no}},{{yes}} (Linux)
FAT32 / FAT32X,{{no}},{{no}},{{no}},{{no}},{{no}},{{no}},{{no}},{{no}},{{yes}} (Linux)
GFS,{{partial}}{{efn |Only for "stuffed" inodes}},{{no}},{{no}},{{no}},{{no}},{{no}},{{yes}},{{dunno}},{{yes}}
HPFS,{{no}},{{no}},{{no}},{{no}},{{yes}},{{no}},{{no}},{{dunno}},{{no}}
NTFS,{{no}},{{yes}},{{partial}},{{no}},{{yes}},{{no}},{{yes}},{{dunno}},{{yes}} (NT 6.1 + newer)
HFS Plus,{{no}},{{no}},{{no}},{{no}},{{yes}},{{no}},{{no}},{{dunno}},{{yes}} (macOS)
FFS,{{no}},{{no}},{{yes2}} 8:1{{efn |name=note-45 |Other block:fragment size ratios supported; 8:1 is typical and recommended by most implementations.}},{{no}},{{no}},{{no}},{{yes}},{{dunno}},{{no}}
UFS1,{{no}},{{no}},{{yes2}} 8:1{{efn |name=note-45}},{{no}},{{no}},{{no}},{{yes}},{{dunno}},{{no}}
UFS2,{{no}},{{no}},{{yes2}} 8:1{{efn |name=note-45}},{{no}},{{no}},{{yes}},{{yes}},{{dunno}},{{yes}}[63][64]
LFS,{{no}},{{no}},{{yes2}} 8:1{{efn |name=note-45}},{{no}},{{no}},{{no}},{{yes}},{{yes}},{{dunno}}
ext,{{no}},{{no}},{{no}},{{no}},{{no}},{{no}},{{yes}},{{no}},{{no}}
Xiafs,{{no}},{{no}},{{no}},{{no}},{{no}},{{no}},{{yes}},{{dunno}},{{dunno}}
ext2,{{no}},"{{no}}{{efn |name=note-49 |e2compr, a set of patches providing block-based compression for ext2, has been available since 1997, but has never been merged into the mainline Linux kernel.}}","{{no}}{{efn |name=note-47 |Fragments were planned, but never actually implemented on ext2 and ext3.}}",{{no}},{{no}},{{no}},{{yes}},{{no}},{{yes}}
ext3,{{no}},{{no}},{{no}}{{efn |name=note-47}},{{no}},{{no}},{{no}},{{yes}},{{no}},{{yes}}
ext4,{{no}},{{no}},{{no}}{{efn |name=note-47}},{{yes}},{{yes}},{{no}},{{yes}},{{no}},{{yes}}
NOVA,{{no}},{{no}},{{no}},{{no}},{{yes}},{{no}},{{yes}},{{yes}},{{dunno}}
F2FS,{{no}},{{no}},{{no}},{{yes}},"{{partial}}{{efn |name=note-75 | Stores one largest extent in disk, and caches multiple extents in DRAM dynamically.}}",{{no}},{{yes}},{{yes}},{{yes}}[65]
Lustre,{{no}},{{no}},{{no}},{{yes}},{{yes}},{{no}},{{yes}},{{dunno}},{{dunno}}
NILFS,{{no}},{{no}},{{no}},{{yes}},{{no}},{{no}},{{yes}},{{yes}},{{dunno}}
ReiserFS,{{yes}},{{no}},{{yes}}{{efn |name=note-73 |Tail packing is technically a special case of block suballocation where the suballocation unit size is always 1 byte.}},{{no}},{{no}},{{no}},{{yes}},{{dunno}},{{dunno}}
Reiser4,{{yes}},{{yes}}{{efn |name=note-50}},{{yes}}{{efn |name=note-73}},{{yes}},{{yes}}{{efn |name=note-39 |In "extents" mode.}},{{no}},{{yes}},{{dunno}},{{dunno}}
OCFS,{{no}},{{no}},{{no}},{{no}},{{yes}},{{no}},{{dunno}},{{dunno}},{{dunno}}
OCFS2,{{no}},{{no}},{{no}},{{no}},{{yes}},{{no}},{{yes}},{{dunno}},{{dunno}}
XFS,{{no}},{{no}},{{no}},{{yes}},{{yes}},{{no}},{{yes}},"{{yes}}, on request[66]",{{yes}} (Linux)
JFS,{{no}},{{yes2}} only in JFS1 on AIX[67],{{yes}},{{no}},{{yes}},{{no}},{{yes}},{{dunno}},{{yes}} (Linux)
QFS,{{no}},{{no}},{{yes}},{{no}},{{no}},{{no}},{{dunno}},{{dunno}},{{dunno}}
BFS,{{no}},{{no}},{{no}},{{no}},{{yes}},{{no}},{{dunno}},{{dunno}},{{yes}} (Haiku)
NSS,{{no}},{{yes}},{{no}},{{no}},{{yes}},{{no}},{{dunno}},{{dunno}},{{dunno}}
NWFS,{{no}},{{yes}},{{yes}}{{efn |name=note-42 |Each possible size (in sectors) of file tail has a corresponding suballocation block chain in which all the tails of that size are stored. The overhead of managing suballocation block chains is usually less than the amount of block overhead saved by being able to increase the block size but the process is less efficient if there is not much free disk space.}},{{no}},{{no}},{{no}},{{dunno}},{{dunno}},{{dunno}}
ODS-5,{{no}},{{no}},{{no}},{{no}},{{yes}},{{no}},{{dunno}},{{dunno}},{{dunno}}
VxFS,{{no}},{{no}},{{dunno}},{{no}},{{yes}},{{no}},{{yes}},{{dunno}},{{dunno}}
UDF,{{no}},{{no}},{{no}},{{dunno}}{{efn |name=note-46 |Depends on UDF implementation.}},{{yes}},{{no}},{{no}},{{dunno}},{{no}}
Fossil,{{no}},{{yes}},{{no}},{{no}},{{no}},{{no}},{{dunno}},{{dunno}},{{dunno}}
ZFS,{{no}},{{yes}},{{yes}},{{yes}},{{no}},{{yes}},{{yes}},{{yes}},"{{yes}} (FreeBSD, illumos)"
Btrfs,{{yes}},{{yes}},{{yes}},{{yes}},{{yes}},{{yes}},{{yes}},{{yes}},{{yes}}
VMFS2,{{no}},{{no}},{{yes}},{{no}},{{no}},{{no}},{{yes}},{{dunno}},{{dunno}}
VMFS3,{{no}},{{no}},{{yes}},{{no}},{{no}},{{no}},{{yes}},{{dunno}},{{dunno}}
ReFS,{{dunno}},{{no}},{{dunno}},{{dunno}},{{dunno}},{{no}},{{yes}},{{yes}},{{dunno}}
ISO 9660,{{no}},"{{no}}{{efn|name=note-80|Linux supports the zisofs extension that allows per-file compression, and file system creation tools may support creating such images. zisofs images are incompatible on non-Linux OSes.}}",{{no}},{{no}},{{yes}}{{efn|name=note-81|ISO 9660 Level 3 only}},{{no}},{{no}},{{no}},{{no}}
Rock Ridge,{{no}},{{no}}{{efn|name=note-80}},{{no}},{{no}},{{yes}}{{efn|name=note-81}},{{no}},{{no}},{{no}},{{no}}
Joliet ("CDFS"),{{no}},{{no}}{{efn|name=note-80}},{{no}},{{no}},{{yes}}{{efn|name=note-81}},{{no}},{{no}},{{no}},{{no}}
SquashFS,{{no}},{{yes}},{{no}},{{no}},{{no}},{{no}},{{yes}},{{no}},{{no}}
File system,Tail packing,Transparent compression,Block suballocation,Allocate-on-flush,Extents,Variable file block size{{efn |name=note-41}},Sparse files,Copy on write,Trim support
